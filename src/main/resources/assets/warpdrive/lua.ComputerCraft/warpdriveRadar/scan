
if not term.isColor() then
  print("Advanced computer required")
  exit()
end

function error(message)
  term.setBackgroundColor(colors.black)
  term.setTextColor(colors.red)
  term.write(message)
  term.setBackgroundColor(colors.black)
  term.setTextColor(colors.white)
  print()
end

local radar
local sides = peripheral.getNames()
for _, side in pairs(sides) do
  if peripheral.getType(side) == "warpdriveRadar" then
    print("Radar found on " .. side)
    radar = peripheral.wrap(side)
  end
end
if radar == nil then
  error("No radar detected")
  exit()
end

local argv = { ... }
if #argv ~= 1 then
  error("Usage: scan <scanRadius>")
  exit()
end

local radius = tonumber(argv[1])
local scale = 50

local w, h = term.getSize()
local radarX, radarY, radarZ = radar.position()

term.clear()

function colorScreen(color)
  for a = 2, w - 1 do
    for b = 1, h do
      paintutils.drawPixel(a, b, color)
    end
  end
end

function textOut(x, y, text, fg, bg)
  term.setCursorPos(x, y)
  term.setTextColor(fg)
  term.setBackgroundColor(bg)
  term.write(text)
  local _, yt = term.getCursorPos()
  term.setCursorPos(1, yt + 1)
end	

function translateXZ(oldX, oldZ)
  local x = radarX - oldX
  local z = radarZ - oldZ
  
  x = x / (radius / scale)
  z = z / (radius / scale)
  
  x = x + (w / 2)
  z = z + (h / 2)
  
  x = math.floor(x)
  z = math.floor(z)
  
  return x, z
end

function drawContact(x, _, z, name, color)
  local newX, newZ = translateXZ(x, z)
  
  paintutils.drawPixel(newX, newZ, color)
  textOut(newX - 3, newZ + 1, "[" .. name .. "]", colors.white, colors.black)
end

function scanAndDraw()
  local energy, energyMax = radar.energy()
  if energy == nil then energy = 0 end
  if energyMax == nil or energyMax == 0 then energyMax = 1 end
    
  local energyRequired = radar.getEnergyRequired(radius)
  if energyRequired == nil then energyRequired = 0 end
  
  if (energyRequired <= 0 or energy < energyRequired) then
    local hh = math.floor(h / 2)
    local hw = math.floor(w / 2)
    
    paintutils.drawLine(hw - 5, hh - 1, hw + 5, hh - 1, colors.red)
    paintutils.drawLine(hw - 5, hh, hw + 5, hh, colors.red)
    textOut(hw - 4, hh,"LOW POWER", colors.white, colors.red)
    paintutils.drawLine(hw - 5, hh + 1, hw + 5, hh + 1, colors.red)
    os.sleep(1)
    
    return 0
  end
  radar.radius(radius)
  radar.start()
  local scanDuration = radar.getScanDuration(radius)
  os.sleep(scanDuration)
  
  redraw()
  
  local numResults = radar.getResultsCount()
  
  if (numResults ~= 0) then
    for i = 0, numResults-1 do
      local success, _, name, cx, cy, cz = radar.getResult(i)
      
      if success then
        drawContact(cx, cy, cz, name, colors.red)
      end
    end
  end
  
  drawContact(radarX, radarY, radarZ, "RAD", colors.yellow)
end

function redraw()
  colorScreen(colors.green)
  
  paintutils.drawLine(1, 1, w, 1, colors.black)
  
  textOut((w / 2) - 8, 1, "= Q-Radar v0.3 =", colors.white, colors.black)
  
  textOut(w - 3, 1, "[X]", colors.white, colors.red)
  
  paintutils.drawLine(1, h, w, h, colors.black)
  local energy, _ = radar.energy()
  if energy == nil then energy = 0 end
  textOut(4, h, "Energy: " .. energy .. " EU | Scan radius: " .. radius, colors.white, colors.black)
end

local continue = true
while continue do
  scanAndDraw()
end

term.clear()
